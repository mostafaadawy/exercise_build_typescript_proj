TypeScript can be installed locally or globally

$ npm i typescript // save to dependencies
$ npm i typescript --save-dev // save to devDependencies
$ npm i --save-dev ts-node 
$ npm i --save-dev @types/node

NPX and Creating your package.json Script

add a script to your package.json
"scripts": {
    "build": "npx tsc"
  },

Configuring TypeScript

tsconfig.json can also be named jsconfig.json. 

To install the config file, run

$ npx tsc --init    

Helpful configurations to note:

{
  "compilerOptions": {
    "target": "es5",                          
    "module": "commonjs",                     
    "lib": ["ES2018", "DOM"], 
    "outDir": "./build",                        
    "strict": true,                           
    "noImplicitAny": true,                 
  },
  "exclude": ["node_modules", "tests"]

You will see many more options available than what is above. Your application may require additional settings to be configured, but these are typically the main settings to start with.

    target - sets what version of JS TypeScript will be transpiled to.
    module - sets what module system will be used when transpiling. Node.js uses the common.js module system by default
    lib - is used to say what libraries your code is using. In this case, ES2018 and the DOM API
    outDir - where you want your src code to output to. Often named build, prod, or server (when using it serverside)
    strict - enable strict typing
    noImplicitAny - disallow the "any" type (covered in TypeScript Basics)
    exclude - directories to exclude in compiling







ES6 Modules

Now that we are using TypeScript for our application, we can also easily utilize the ES6 module system instead of the CommonJS module system. Destructuring should only be used when you are exporting the functions individually. If choosing to use export default, you must import the entire default as a module.
Import

For importing modules, use the following syntax

// Rename the module
import 'name' from 'module';

// Use destructuring to pull in specific functions when they are exported individually
import {function, function} from 'module';

Export

// Export an individual function or other type of object in code
export const myFunction = () => {};

// Export a single item at the end
export default object;

// Export a list of objects
export default {object1, object2};






To execute your "build" script use the following:

$ npm run build
$ node build/.index


brief steps

    Move index.js to src/index.ts
    Initialize npm and add your details

    npm init -y

    Add typescript, ts-node and @types/node definitions to dev dependencies.

    npm i --save-dev typescript
    npm i --save-dev ts-node 
    npm i --save-dev @types/node

    Add the default TypeScript configuration file.

    npx tsc --init

    Add a build script to your package.json file

    "build": "npx tsc"

    Check the configuration file tsconfig.json and apply the following settings:

    "target": "es5",
    "lib": ["ES6"],
    "outDir": "./build",
    "strict": true,
    "noImplicitAny": true

    and exclude checking of node modules by adding an "exclude" parameter after the "compilerOptions"

    "exclude": ["node_modules"]

    Run the build script

    npm run build

    Run the completed index file

    node build/.

